Pyspotify Utils

This repository attempts to make it as simple as possible to integrate pyspotify.

It's currently as simple as
>>> spotify_pro_credentials = { "spotify_name": "", "spotify_password": "" }
>>> Spotify(spotify_pro_credentials).play_album("Stadium Arcadium")


Initialization:

Sadly, that simplicity comes after some initialization.

You need a spotify_appkey.key in your project root directory. You can get this following the tutorial at http://pyspotify.mopidy.com/en/latest/quickstart/#application-keys.


Dependencies:

libspotify
pyspotify

Information on installing dependencies at http://pyspotify.mopidy.com/en/latest/installation/.


Usage:

There are five methods you will use to play tracks: play_track, play_album, shuffle_album, play_artist, shuffle_artist

There are three methods to pause and resume: pause, resume, and pause_toggle.

All of the play methods takes a string that will be searched for in Spotify. The first result (of the appropriate category) will be used. It will error on no results. (IndexError: list index out of range)
The string given is searched as is. For info on how to search Spotify intelligently, go to http://news.spotify.com/us/2008/01/22/searching-spotify/.

The play_* methods play through all tracks sequentially. The shuffle_* methods play through all tracks in a random order.

None of the methods block. They return immediately, while a different thread is started to play the music.

These methods will cancel the currently playing song when called.

Spotify() returns a singleton. The credentials only need to be passed in the first time you call the function. See the "if __name__ == '__main__':" section.


TODO (As in, questions for you and my future self):

I currently have the spotify session configured to use a PortAudio sink. Is that better than an ALSA sink? Are there other types I should look into?

How does searching work with playlists? More specifically, can I easily distinguish between owned playlists and other playlists? What about playlists with the same name?

How do I make this a thing that can be "pip install"-ed?
